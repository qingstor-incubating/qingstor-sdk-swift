{{- $service := .Data.Service -}}
{{- $subServices := .Data.SubServices -}}

//
// Bucket.swift
//
// +-------------------------------------------------------------------------
// | Copyright (C) 2016 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------
//

import Foundation
import ObjectMapper

public extension {{$service.Name | camelCase}} {
    public func bucket(bucketName: String, zone: String? = nil) -> Bucket {
        return Bucket(context: self.context.rawCopy(), bucketName: bucketName, zone: zone ?? self.zone)
    }
}

public class Bucket: QingStorAPI {
{{- range $_, $subService := $subServices -}}
    {{- $isBucket := eq $subService.Name "Bucket" -}}
    {{- $isObject := eq $subService.Name "Object" -}}

    {{- range $_, $operation := $subService.Operations}}
        {{- $hasParams := gt (len $operation.Request.Params.Properties) 0 -}}
        {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0 -}}
        {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0 -}}
        {{- $hasBody := eq $operation.Request.Body.Type "binary" -}}
        {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasBody -}}

        {{- if $operation.Description -}}{{"\n    "}}// {{(replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord}}: {{$operation.Description}}{{- end -}}
        {{"\n    "}}// Documentation URL: {{$operation.DocumentationURL}}
    public func{{- " " -}}

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}(

        {{- if $isObject -}}
            objectKey: String,{{- " " -}}
        {{- end -}}

        input:{{- " " -}}

        {{- if $hasInput -}}
            {{$operation.ID | camelCase}}Input
        {{- else -}}
            {{$operation.ID | camelCase}}Input = {{$operation.ID | camelCase}}Input()
        {{- end -}}
    , completion: @escaping RequestCompletion<{{$operation.ID | camelCase}}Output>) {
        let (sender, error) = self.

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}Sender(

        {{- if $isObject -}}
            objectKey: objectKey,{{- " " -}}
        {{- end -}}

        input: input)

        if let error = error {
            completion(nil, error)
            return
        }

        sender!.sendAPI(completion: completion)
    }

    {{"// " -}}
    {{- if $isBucket -}}
        {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}Sender
        {{- " " -}}
        create sender of {{(replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}.
    {{- else -}}
        {{- $operation.ID | camelCase | lowerFirstWord -}}Sender
        {{- " " -}}
        create sender of {{$operation.ID | camelCase | lowerFirstWord}}.
    {{- end}}
    public func{{- " " -}}

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}Sender(

        {{- if $isObject -}}
        objectKey: String,{{- " " -}}
        {{- end -}}

        input:{{- " " -}}

        {{- if $hasInput -}}
            {{$operation.ID | camelCase}}Input
        {{- else -}}
            {{$operation.ID | camelCase}}Input = {{$operation.ID | camelCase}}Input()
        {{- end -}}

        ) -> (APISender?, Error?) {
        do {
            {{$uri := $operation.Request.URI -}}
            {{- $uri := replace $uri "{" "<" -1 -}}
            {{- $uri := replace $uri "}" ">" -1 -}}
            {{- $uri := dashConnected $uri -}}

            try self.setupContext(uriFormat: "{{$uri}}"
                {{- if $isObject -}}
                , objectKey: objectKey
                {{- end -}}
            )
        } catch {
            return (nil, error)
        }
        
        return APISender.qingStor(context: self.context, input: input, method: {{template "HTTPMethod" $operation}})
    }
    {{end -}}
{{- end}}
}
{{range $_, $subService := $subServices -}}
    {{range $_, $operation := $subService.Operations}}
        {{template "RenderInput" $operation}}
        {{template "RenderOutput" $operation}}
    {{end -}}
{{- end -}}
