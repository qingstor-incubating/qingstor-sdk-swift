{{- $service := .Data.Service -}}

//
// {{$service.Name | camelCase}}.swift
//
// +-------------------------------------------------------------------------
// | Copyright (C) 2016 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------
//

import Foundation
import ObjectMapper

{{if $service.Description -}}// {{$service.Name | camelCase}}: {{$service.Description}}{{- end}}
public class {{$service.Name | camelCase}}: QingStorAPI {
{{- range $_, $operation := $service.Operations -}}
    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0 -}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0 -}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0 -}}
    {{- $hasBody := eq $operation.Request.Body.Type "binary" -}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasBody}}
    {{if $operation.Description -}}// {{$operation.ID | camelCase}}: {{$operation.Description}}{{end}}
    {{if $operation.DocumentationURL -}}// Documentation URL: {{$operation.DocumentationURL}}{{end}}
    public func {{$operation.ID | camelCase | lowerFirstWord}}(input:{{- " " -}}

    {{- if $hasInput -}}
        {{$operation.ID | camelCase}}Input
    {{- else -}}
        {{$operation.ID | camelCase}}Input = {{$operation.ID | camelCase}}Input()
    {{- end -}}

    , completion: @escaping RequestCompletion<{{$operation.ID | camelCase}}Output>) {
        let (sender, error) = self.{{$operation.ID | camelCase | lowerFirstWord}}Sender(input: input)

        if let error = error {
            completion(nil, error)
            return
        }

        sender!.sendAPI(completion: completion)
    }

    // {{$operation.ID | camelCase | lowerFirstWord}}Sender create sender of {{$operation.ID | camelCase | lowerFirstWord}}.
    public func {{$operation.ID | camelCase | lowerFirstWord}}Sender(input:{{- " " -}}

    {{- if $hasInput -}}
        {{$operation.ID | camelCase}}Input
    {{- else -}}
        {{$operation.ID | camelCase}}Input = {{$operation.ID | camelCase}}Input()
    {{- end -}}

    ) -> (APISender?, Error?) {
        return APISender.qingStor(context: self.context,
                                  input: input,
                                  method: {{template "HTTPMethod" $operation}},
                                  signer: self.signer,
                                  credential: self.credential,
                                  buildingQueue: self.buildingQueue,
                                  callbackQueue: self.callbackQueue)
    }
{{end}}
}
{{range $_, $operation := $service.Operations}}
    {{template "RenderInput" $operation}}
    {{template "RenderOutput" $operation}}
{{end}}
