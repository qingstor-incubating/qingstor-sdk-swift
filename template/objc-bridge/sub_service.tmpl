{{- $service := .Data.Service -}}
{{- $subServices := .Data.SubServices -}}

//
// BucketObjcBridge.swift
//
// +-------------------------------------------------------------------------
// | Copyright (C) 2018 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------
//

import Foundation

extension Bucket {
    @objc public convenience init(context: APIContext,
                                  bucketName: String,
                                  zone: String) {
        self.init(context: context,
                  bucketName: bucketName,
                  zone: zone,
                  signer: QingStorSigner(),
                  credential: nil,
                  buildingQueue: DispatchQueue.global(),
                  callbackQueue: DispatchQueue.main)
    }

    @objc public convenience init(context: APIContext,
                                  bucketName: String,
                                  zone: String,
                                  credential: URLCredential?,
                                  buildingQueue: DispatchQueue,
                                  callbackQueue: DispatchQueue) {
        self.init(context: context,
                  bucketName: bucketName,
                  zone: zone,
                  signer: QingStorSigner(),
                  credential: credential,
                  buildingQueue: buildingQueue,
                  callbackQueue: callbackQueue)
    }

    @objc public convenience init(bucketName: String,
                                  zone: String,
                                  qingstorSigner: QingStorSigner) {
        self.init(bucketName: bucketName,
                  zone: zone,
                  signer: qingstorSigner)
    }

    @objc public convenience init(context: APIContext,
                                  bucketName: String,
                                  zone: String,
                                  qingstorSigner: QingStorSigner) {
        self.init(context: context,
                  bucketName: bucketName,
                  zone: zone,
                  signer: qingstorSigner)
    }

    @objc public convenience init(bucketName: String,
                                  zone: String,
                                  customizedSigner: CustomizedSigner) {
        self.init(bucketName: bucketName,
                  zone: zone,
                  signer: customizedSigner)
    }

    @objc public convenience init(context: APIContext,
                                  bucketName: String,
                                  zone: String,
                                  customizedSigner: CustomizedSigner) {
        self.init(context: context,
                  bucketName: bucketName,
                  zone: zone,
                  signer: customizedSigner)
    }
{{ range $_, $subService := $subServices -}}
    {{- $isBucket := eq $subService.Name "Bucket" -}}
    {{- $isObject := eq $subService.Name "Object" -}}

    {{- range $_, $operation := $subService.Operations}}
        {{- $hasParams := gt (len $operation.Request.Params.Properties) 0 -}}
        {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0 -}}
        {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0 -}}
        {{- $hasBody := eq $operation.Request.Body.Type "binary" -}}
        {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasBody -}}
		
		{{- if $operation.Description -}}{{"\n    "}}// {{(replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord}}: {{$operation.Description}}{{- end -}}
		{{"\n    "}}// Documentation URL: {{$operation.DocumentationURL}}
    @objc public func{{- " " -}}

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}(

        {{- if $isObject -}}
            objectKey: String,{{- " " -}}
        {{- end -}}

        input:{{- " " -}}

        {{- if $hasInput -}}
            {{$operation.ID | camelCase}}Input
        {{- else -}}
            {{$operation.ID | camelCase}}Input = {{$operation.ID | camelCase}}Input()
        {{- end -}}
    , progress: RequestProgress?, completion: @escaping ({{$operation.ID | camelCase}}Output?, HTTPURLResponse?, Error?) -> Void) {
    	  self.

    	  {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}(

		    {{- if $isObject -}}
            objectKey: objectKey,{{- " " -}}
        {{- end -}}

        input: input, progress: progress) { response, error in
            completion(response?.output, response?.rawResponse, error)
        }
    }

    {{- if $operation.Description -}}{{"\n    "}}// {{(replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord}}: {{$operation.Description}}{{- end -}}
    {{"\n    "}}// Documentation URL: {{$operation.DocumentationURL}}
    @objc public func{{- " " -}}

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}(

        {{- if $isObject -}}
            objectKey: String,{{- " " -}}
        {{- end -}}

        input:{{- " " -}}

        {{- if $hasInput -}}
            {{$operation.ID | camelCase}}Input
        {{- else -}}
            {{$operation.ID | camelCase}}Input = {{$operation.ID | camelCase}}Input()
        {{- end -}}
    , completion: @escaping ({{$operation.ID | camelCase}}Output?, HTTPURLResponse?, Error?) -> Void) {
        self.

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}(

        {{- if $isObject -}}
            objectKey: objectKey,{{- " " -}}
        {{- end -}}

        input: input, progress: nil, completion: completion)
    }

    {{"// " -}}
    {{- if $isBucket -}}
        {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}Sender
        {{- " " -}}
        create sender of {{(replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}.
    {{- else -}}
        {{- $operation.ID | camelCase | lowerFirstWord -}}Sender
        {{- " " -}}
        create sender of {{$operation.ID | camelCase | lowerFirstWord}}.
    {{- end}}
    @objc public func{{- " " -}}

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}Sender(

        {{- if $isObject -}}
        objectKey: String,{{- " " -}}
        {{- end -}}

        input:{{- " " -}}

        {{- if $hasInput -}}
            {{$operation.ID | camelCase}}Input
        {{- else -}}
            {{$operation.ID | camelCase}}Input = {{$operation.ID | camelCase}}Input()
        {{- end -}}

        ) -> APISenderResult {
        let (sender, error) = self.

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) | lowerFirstWord -}}
        {{- else -}}
            {{- $operation.ID | camelCase | lowerFirstWord -}}
        {{- end -}}Sender(

        {{- if $isObject -}}
        objectKey: objectKey,{{- " " -}}
        {{- end -}}

        input: input)
        return APISenderResult(sender: sender, error: error)
    }
    {{ end }}
{{- end }}
}

extension APISender {
{{- range $_, $subService := $subServices -}}
    {{- $isBucket := eq $subService.Name "Bucket" -}}

    {{- range $_, $operation := $subService.Operations}}
    @objc public func{{- " send" -}}

        {{- if $isBucket -}}
            {{- (replace ($operation.ID | camelCase) "Bucket" "" -1) -}}
        {{- else -}}
            {{- $operation.ID | camelCase -}}
        {{- end -}}API(completion: @escaping ({{$operation.ID | camelCase}}Output?, HTTPURLResponse?, Error?) -> Void) {
        sendAPI { (response: Response<{{$operation.ID | camelCase}}Output>?, error: Error?) in
            completion(response?.output, response?.rawResponse, error)
        }
    }
    {{ end }}
{{- end }} 
}

{{range $_, $subService := $subServices -}}
    {{range $_, $operation := $subService.Operations}}
        {{template "RenderExtensionInput" $operation}}
    {{end -}}
{{- end -}}